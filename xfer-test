#!/usr/bin/python
import os
import popen2
import re
from socket import *
import string
import sys

bufsize = 64*1024
rx_pasv = re.compile(r'(\d+),(\d+),(\d+),(\d+),(\d+),(\d+)')
rx_pid = re.compile(r'\[\d+\]')

def pasv_socket(pasv):
	global sock
	match = rx_pasv.search(pasv)
	sa = map(int, match.groups())
	sock = socket(AF_INET, SOCK_STREAM)
	sock.connect((string.join(map(str, sa[:4]), '.'), (sa[4] << 8 | sa[5])))
	return pasv[:match.start()] + '#,#,#,#,#,#' + pasv[match.end():]

def port_socket():
	global sock, ip
	sock = socket(AF_INET, SOCK_STREAM)
	sock.bind((ip, 0))
	addr = sock.getsockname()
	sock.listen(1)
	return "PORT %s,%d,%d\r\n" % (string.replace(addr[0], '.', ','),
								  addr[1] >> 8, addr[1] & 0xff)

def retr_socket():
	global sock, pasv
	if not pasv:
		(fd,addr) = sock.accept()
		sock.close()
		sock = fd
	while 1:
		buf = sock.recv(bufsize)
		if not buf: break
		os.write(1, buf)
	sock.close()

def store_socket():
	global sock, pasv
	if not pasv:
		(fd,addr) = sock.accept()
		sock.close()
		sock = fd
	while 1:
		buf = os.read(0, bufsize)
		if not buf: break
		sock.send(buf)
	sock.close()

try:
	program = sys.argv[1]
	pasv = { 'pasv': 1, 'port': 0 }[sys.argv[2]]
	iofn = { 'retr': retr_socket, 'store': store_socket }[sys.argv[3]]
	fmtcmd = { 'asc': 'TYPE A', 'bin': 'TYPE I' }[sys.argv[4]]
	ip = os.environ['TCPREMOTEIP']
	xcommands = sys.argv[5:-1]
	command = sys.argv[-1]
except:
	print "usage: xfer-test program [pasv|port] [retr|store] [asc|bin] [setup commands] command"
	sys.exit(1)

def readline():
	global pin
	line = pin.readline()
	num = int(line[:3])
	if num >= 400:
		os.write(1, line)
		sys.exit(1)
	line = re.sub(', \d+B/s', '', line)
	return line

(pin, pout, perr) = popen2.popen3(program)
os.write(1, readline())

xcommands[0:0] = [fmtcmd]
for cmd in xcommands:
	pout.write(cmd)
	pout.write("\r\n")
	pout.flush()
	os.write(1, readline())

if pasv:
	pout.write("PASV\r\n")
	pout.flush()
	line = pasv_socket(readline())
	os.write(1, line)
else:
	pout.write(port_socket())
	pout.flush()
	os.write(1, readline())

pout.write(command)
pout.write('\r\n')
pout.flush()
os.write(1, readline())

iofn()

os.write(1, readline())
